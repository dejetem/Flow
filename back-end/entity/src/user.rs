//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub did: String,
    pub username: String,
    pub display_name: String,
    pub device_ids: String,
    #[sea_orm(column_type = "Text")]
    pub public_key_jwk: String,
    pub time_created: DateTimeWithTimeZone,
    pub last_login: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::pass_key::Entity")]
    PassKey,
}

impl Related<super::pass_key::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PassKey.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
